{"version":3,"sources":["webpack:///./src/algorithms/grayscale/editPixelsGray.jsx","webpack:///./src/algorithms/convolution/kernels.js","webpack:///./src/algorithms/convolution/convolution.js","webpack:///./src/assets/video.webm","webpack:///./src/assets/video.mp4","webpack:///./src/algorithms/video/VideoPlayer.js","webpack:///./src/pages/video.js"],"names":["averageGrayScale","r","g","b","ligthnessGrayScale","Math","max","min","luminosityGrayScale","parseInt","editPixelsGray","p5","img","tipo","loadPixels","technique","x","width","y","height","loc","average_rgb","pixels","color","red","green","blue","updatePixels","BoxBlurKernel","SharpenKernel","EdgeDetectionKernel","kernelProduct","kernel","red_channel","green_channel","blue_channel","i","j","convolution","copyImg","createImage","convol_rgb","alpha","module","exports","props","video","window","Sketch","loadable","setup","canvasParentRef","createCanvas","parent","createVideo","videomp4","videowebm","size","hide","setTimeout","pause","play","loop","draw","background","push","image","filter","GRAY","pop","className","VideoPlayer","action","type","value"],"mappings":"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","file":"component---src-pages-video-js-c0ff42807d6c4dfedef5.js","sourcesContent":["const editPixelsGray = (p5, img, tipo) => {\r\n\timg.loadPixels();\r\n\tvar technique = \"average\";\r\n\r\n\tif (tipo == \"average\") {\r\n\t\ttechnique = averageGrayScale;\r\n\t} else if (tipo == \"ligthness\") {\r\n\t\ttechnique = ligthnessGrayScale;\r\n\t} else if (tipo == \"luminosity\") {\r\n\t\ttechnique = luminosityGrayScale;\r\n\t}\r\n\r\n\tfor (var x = 1; x < img.width - 1; ++x) {\r\n\t\tfor (var y = 1; y < img.height - 1; ++y) {\r\n\t\t\tlet loc = (x + img.width * y) * 4;\r\n\t\t\tlet average_rgb = technique(\r\n\t\t\t\timg.pixels[loc],\r\n\t\t\t\timg.pixels[loc + 1],\r\n\t\t\t\timg.pixels[loc + 2]\r\n\t\t\t);\r\n\t\t\tlet color = p5.color(average_rgb, average_rgb, average_rgb);\r\n\t\t\timg.pixels[loc] = p5.red(color);\r\n\t\t\timg.pixels[loc + 1] = p5.green(color);\r\n\t\t\timg.pixels[loc + 2] = p5.blue(color);\r\n\t\t}\r\n\t}\r\n\r\n\timg.updatePixels();\r\n\treturn img;\r\n};\r\n\r\nexport default editPixelsGray;\r\n\r\nfunction averageGrayScale(r, g, b) {\r\n\treturn (r + g + b) / 3;\r\n}\r\n\r\nfunction ligthnessGrayScale(r, g, b) {\r\n\treturn Math.max(r, g, b) + Math.min(r, g, b) / 2;\r\n}\r\n\r\n// Gray Scale with LuminosityGrayScale\r\nfunction luminosityGrayScale(r, g, b) {\r\n\treturn parseInt(0.21 * r + 0.72 * g + 0.07 * b);\r\n}\r\n","const blur = 1.0 / 9.0;\r\nconst blur_gaussian = 1.0/16.0;\r\n\r\nexport const BoxBlurKernel = [[ blur, blur, blur ], [ blur, blur, blur ], [ blur, blur, blur ]];   \r\nexport const GaussianBlurKernel = [[1*blur_gaussian,2*blur_gaussian,1*blur_gaussian],[2*blur_gaussian,4*blur_gaussian,2*blur_gaussian],[1*blur_gaussian,2*blur_gaussian,1*blur_gaussian]];\r\nexport const SharpenKernel = [[0, -1, 0],[-1, 5, -1],[0,-1,0]];\r\nexport const EdgeDetectionKernel = [[-1, -1 , -1],[-1, 8, -1],[-1, -1, -1]];","const convolution = (p5, img, kernel) => {\r\n    let copyImg = p5.createImage(img.width, img.height);\r\n    copyImg.loadPixels();\r\n\r\n    for(var x = 1; x < img.width - 1; ++x){\r\n        for(var y = 1; y < img.height - 1; ++y){\r\n            let loc = (x + y*img.width) * 4;\r\n            let convol_rgb = kernelProduct(img, x, y, kernel);\r\n\r\n            copyImg.pixels[loc] = convol_rgb[0];\r\n            copyImg.pixels[loc+1] = convol_rgb[1];\r\n            copyImg.pixels[loc+2] = convol_rgb[2];\r\n            copyImg.pixels[loc+3] = p5.alpha(1);            \r\n        }        \r\n    }\r\n      \r\n    copyImg.updatePixels();\r\n    return copyImg;    \r\n}\r\n\r\nfunction kernelProduct(img, x, y, kernel){\r\n    var red_channel = 0.0;\r\n    var green_channel = 0.0;\r\n    var blue_channel = 0.0;\r\n    for(var i = -1; i <= 1; ++i){\r\n      for(var j = -1; j <= 1; ++j){\r\n        let loc = ((x+i) + (y+j)*img.width)*4;\r\n\r\n         red_channel += kernel[i+1][j+1] * img.pixels[loc];\r\n         green_channel += kernel[i+1][j+1] * img.pixels[loc + 1];\r\n         blue_channel += kernel[i+1][j+1] * img.pixels[loc + 2];\r\n      }\r\n    }\r\n    return [parseInt(red_channel), parseInt(green_channel), parseInt(blue_channel)];\r\n  }\r\n\r\n  export default convolution;","module.exports = __webpack_public_path__ + \"static/video-24d4b06e8be5ccb2a940dbe6c9aa0657.webm\";","module.exports = __webpack_public_path__ + \"static/video-fcabf6d6adc73fd88d36d1557faed271.mp4\";","import React from \"react\";\r\nimport loadable from \"@loadable/component\";\r\n\r\n/* RECURSOS DE VIDEO */\r\nimport videomp4 from \"../../assets/video.mp4\";\r\nimport videowebm from \"../../assets/video.webm\";\r\n\r\n/* IMPORTACIONES ESCALA DE GRISES */\r\nimport { /*luminosityGrayScale*/ _, /*averageGrayScale*/ __, ligthnessGrayScale } from \"../grayscale/editPixelsGray\";\r\nimport editPixels from \"../grayscale/editPixelsGray\";\r\n\r\n/* IMPORTANCIONES CONVOLUCION */\r\nimport convolution from '../../algorithms/convolution/convolution';\r\nimport {___, ____, _____, EdgeDetectionKernel} from '../../algorithms/convolution/kernels'\r\n\r\n\r\n\r\nexport default (props) => {\r\n\tlet playing = false;\r\n\tlet size = 45;\r\n\tlet height = 9*size;\r\n  \tlet width = 16*size;  \r\n\tlet video;\r\n\tlet button;\r\n\r\n\tlet state = 0;\r\n\r\n\tconst setup = (p5, canvasParentRef) => {\t\t\r\n\t\tp5.createCanvas(width*2,height).parent(canvasParentRef);\r\n\t\tvideo = p5.createVideo([videomp4, videowebm]);\r\n\t\tvideo.parent(canvasParentRef);\r\n\t\tvideo.size(width, height);\r\n\t\tvideo.hide()\r\n\r\n\t\tsetTimeout(function(){\r\n\t\t\tvideo.pause();\r\n\t\t\tvideo.play()\r\n\t\t\tvideo.loop();\r\n\t\t}, 500);\r\n\t};\r\n\r\n\tconst draw = (p5) => {\r\n\t\tp5.background(255);\t\r\n\t\t// MAQUINA DE ESTADOS\r\n\t\tswitch(state){\r\n\t\t\tcase 0: // FILTRO GRIS\t\r\n\t\t\t\tp5.push();\r\n\t\t\t\tp5.image(video.size(width,height), width, 0, width, height);\r\n\t\t\t\tp5.filter(p5.GRAY);\r\n\t\t\t\tp5.pop();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:// CONVOLUCION DETECTOR DE BORDES\r\n\t\t\t\tvideo.loadPixels();\r\n\t\t\t\tp5.image(convolution(p5, video, EdgeDetectionKernel),width,0, p5.width, p5.height);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:// ESCALA DE GRISES CON BRILLO\r\n\t\t\t\tvideo.loadPixels();\r\n\t\t\t\tp5.image(editPixels(p5, video, \"average\"),width,0, p5.width, p5.height);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tp5.image(video, width, 0, p5.width, p5.height);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tp5.push();\t\r\n\t\tp5.image(video.size(width,height), 0, 0, width, height);\t\t\t\t\r\n\t\tp5.pop();\t\t\t\t\t\t\t\r\n\t};\r\n\r\n\tif (typeof window !== \"undefined\") {\r\n\t\tconst Sketch = loadable(() => import(\"react-p5\"));\r\n\t\treturn <Sketch setup={setup} draw={draw}/>;\r\n\t} else {\r\n\t\treturn null;\r\n\t}\r\n};\r\n","import React from \"react\";\r\nimport VideoPlayer from \"../algorithms/video/VideoPlayer\";\r\n\r\nexport default () => {\r\n\treturn (\r\n\t\t<div className=\"ml-5 mr-5 my-3\">\r\n\t\t\t<div>\r\n\t\t\t\t<h1>Test video</h1>\r\n\t\t\t\t<VideoPlayer />\r\n\t\t\t\t<form action=\"\">\r\n\t\t\t\t\t<input type=\"checkbox\" value=\"checked\"/>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n"],"sourceRoot":""}