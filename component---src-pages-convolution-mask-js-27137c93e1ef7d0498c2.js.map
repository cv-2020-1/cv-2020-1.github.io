{"version":3,"sources":["webpack:///./src/assets/fuego.jpg","webpack:///./src/algorithms/convolution/convolution.js","webpack:///./src/pages/convolutionMask.js","webpack:///./src/algorithms/convolution/kernels.js"],"names":["module","exports","kernelProduct","img","x","y","kernel","red_channel","green_channel","blue_channel","i","j","loc","width","pixels","parseInt","convolution","p5","copyImg","createImage","height","loadPixels","convol_rgb","alpha","updatePixels","BoxBlurKernel","SharpenKernel","EdgeDetectionKernel","props","window","Sketch","loadable","className","setup","canvasParentRef","createCanvas","parent","resizeCanvas","clientWidth","noLoop","draw","background","image","preload","loadImage","fuego"],"mappings":"gFAAAA,EAAOC,QAAU,IAA0B,qD,uFCoB3C,SAASC,EAAcC,EAAKC,EAAGC,EAAGC,GAI9B,IAHA,IAAIC,EAAc,EACdC,EAAgB,EAChBC,EAAe,EACXC,GAAK,EAAGA,GAAK,IAAKA,EACxB,IAAI,IAAIC,GAAK,EAAGA,GAAK,IAAKA,EAAE,CAC1B,IAAIC,EAAgC,GAAxBR,EAAEM,GAAML,EAAEM,GAAGR,EAAIU,OAE5BN,GAAeD,EAAOI,EAAE,GAAGC,EAAE,GAAKR,EAAIW,OAAOF,GAC7CJ,GAAiBF,EAAOI,EAAE,GAAGC,EAAE,GAAKR,EAAIW,OAAOF,EAAM,GACrDH,GAAgBH,EAAOI,EAAE,GAAGC,EAAE,GAAKR,EAAIW,OAAOF,EAAM,GAGzD,MAAO,CAACG,SAASR,GAAcQ,SAASP,GAAgBO,SAASN,IAGpDO,IC1Bbb,ED0Baa,EApCG,SAACC,EAAId,EAAKG,GAC1B,IAAIY,EAAUD,EAAGE,YAAYhB,EAAIU,MAAOV,EAAIiB,QAC5CF,EAAQG,aAER,IAAI,IAAIjB,EAAI,EAAGA,EAAID,EAAIU,MAAQ,IAAKT,EAChC,IAAI,IAAIC,EAAI,EAAGA,EAAIF,EAAIiB,OAAS,IAAKf,EAAE,CACnC,IAAIO,EAA0B,GAAnBR,EAAIC,EAAEF,EAAIU,OACjBS,EAAapB,EAAcC,EAAKC,EAAGC,EAAGC,GAE1CY,EAAQJ,OAAOF,GAAOU,EAAW,GACjCJ,EAAQJ,OAAOF,EAAI,GAAKU,EAAW,GACnCJ,EAAQJ,OAAOF,EAAI,GAAKU,EAAW,GACnCJ,EAAQJ,OAAOF,EAAI,GAAKK,EAAGM,MAAM,GAKzC,OADAL,EAAQM,eACDN,GEdEO,EAAgB,CAAC,CAHjB,EAAM,EAAN,EAAM,EAAN,EAAM,GAGiC,CAHvC,EAAM,EAAN,EAAM,EAAN,EAAM,GAGuD,CAH7D,EAAM,EAAN,EAAM,EAAN,EAAM,IAKNC,EAAgB,CAAC,CAAC,GAAI,EAAG,GAAG,EAAE,EAAG,GAAI,GAAG,CAAC,GAAG,EAAE,IAC9CC,EAAsB,CAAC,EAAE,GAAI,GAAK,GAAG,EAAE,EAAG,GAAI,GAAG,EAAE,GAAI,GAAI,I,iCDKzD,mBAACC,GA2Bd,GAAsB,oBAAXC,OAAwB,CACjC,IAAMC,EAASC,aAAS,kBAAM,8DAC9B,OACE,mBAAKC,UAAU,oCACb,iDACA,kBAAIA,UAAU,SACd,6bAIA,YAACF,EAAD,CAAQG,MAhCA,SAAChB,EAAIiB,GACRjB,EAAGkB,aAAa,IAAK,KACvBC,OAAOF,GACdjB,EAAGoB,aAAaH,EAAgBI,YAAa,KAA4C,GACzFrB,EAAGsB,UA4BuBC,KAzBf,SAACvB,GACZA,EAAGwB,WAAW,GACdtC,EAAIkB,aACJJ,EAAGyB,MAAMvC,EAAI,EAAE,EAAGc,EAAGJ,MAAM,EAAGI,EAAGG,OAAO,GACxCH,EAAGyB,MAAM1B,EAAYC,EAAId,EAAKwB,GAAqBV,EAAGJ,MAAM,EAAE,EAAGI,EAAGJ,MAAM,EAAGI,EAAGG,OAAO,GACvFH,EAAGyB,MAAM1B,EAAYC,EAAId,EAAKsB,GAAe,EAAER,EAAGG,OAAO,EAAGH,EAAGJ,MAAM,EAAGI,EAAGG,OAAO,GAClFH,EAAGyB,MAAM1B,EAAYC,EAAId,EAAKuB,GAAeT,EAAGJ,MAAM,EAAEI,EAAGG,OAAO,EAAGH,EAAGJ,MAAM,EAAGI,EAAGG,OAAO,IAmBrDuB,QApCxB,SAAC1B,GACfd,EAAMc,EAAG2B,UAAUC,SAuCnB,OAAO,O","file":"component---src-pages-convolution-mask-js-27137c93e1ef7d0498c2.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/fuego-15df1985b6d383a48079c4d3db3154d0.jpg\";","const convolution = (p5, img, kernel) => {\r\n    let copyImg = p5.createImage(img.width, img.height);\r\n    copyImg.loadPixels();\r\n\r\n    for(var x = 1; x < img.width - 1; ++x){\r\n        for(var y = 1; y < img.height - 1; ++y){\r\n            let loc = (x + y*img.width) * 4;\r\n            let convol_rgb = kernelProduct(img, x, y, kernel);\r\n\r\n            copyImg.pixels[loc] = convol_rgb[0];\r\n            copyImg.pixels[loc+1] = convol_rgb[1];\r\n            copyImg.pixels[loc+2] = convol_rgb[2];\r\n            copyImg.pixels[loc+3] = p5.alpha(1);            \r\n        }        \r\n    }\r\n      \r\n    copyImg.updatePixels();\r\n    return copyImg;    \r\n}\r\n\r\nfunction kernelProduct(img, x, y, kernel){\r\n    var red_channel = 0.0;\r\n    var green_channel = 0.0;\r\n    var blue_channel = 0.0;\r\n    for(var i = -1; i <= 1; ++i){\r\n      for(var j = -1; j <= 1; ++j){\r\n        let loc = ((x+i) + (y+j)*img.width)*4;\r\n\r\n         red_channel += kernel[i+1][j+1] * img.pixels[loc];\r\n         green_channel += kernel[i+1][j+1] * img.pixels[loc + 1];\r\n         blue_channel += kernel[i+1][j+1] * img.pixels[loc + 2];\r\n      }\r\n    }\r\n    return [parseInt(red_channel), parseInt(green_channel), parseInt(blue_channel)];\r\n  }\r\n\r\n  export default convolution;","import \"bootstrap/dist/css/bootstrap.min.css\"\r\nimport \"../styles/app.css\"\r\nimport React from \"react\"\r\nimport loadable from \"@loadable/component\"\r\n\r\nimport convolution from '../algorithms/convolution/convolution';\r\nimport {BoxBlurKernel, GaussianBlurKernel, SharpenKernel, EdgeDetectionKernel} from '../algorithms/convolution/kernels'\r\n\r\nimport fuego from \"../assets/fuego.jpg\";\r\n\r\nlet img, canvas;\r\nexport default (props) => {\r\n  const preload = (p5) => {\r\n    img = p5.loadImage(fuego);      \r\n  }\r\n\r\n  const setup = (p5, canvasParentRef) => {       \r\n    canvas = p5.createCanvas(800, 500)\r\n    canvas.parent(canvasParentRef)    \r\n    p5.resizeCanvas(canvasParentRef.clientWidth, 500*2/*canvasParentRef.clientWidth*0.625*/, false);\r\n    p5.noLoop();\r\n  }\r\n\r\n  const draw = (p5) => {\r\n    p5.background(0)\r\n    img.loadPixels();\r\n    p5.image(img,0,0, p5.width/2, p5.height/2)\r\n    p5.image(convolution(p5, img, EdgeDetectionKernel),p5.width/2,0, p5.width/2, p5.height/2);\r\n    p5.image(convolution(p5, img, BoxBlurKernel),0,p5.height/2, p5.width/2, p5.height/2);\r\n    p5.image(convolution(p5, img, SharpenKernel),p5.width/2,p5.height/2, p5.width/2, p5.height/2);  \r\n  }\r\n\r\n  \r\n\r\n\r\n\r\n\r\n\r\n  if (typeof window !== \"undefined\") {\r\n    const Sketch = loadable(() => import(\"react-p5\"))\r\n    return (\r\n      <div className=\"jumbotron m-4 bg-gradient-orange\">\r\n        <h1>MASCARAS DE CONVOLUCIÓN</h1>\r\n        <hr className=\"my-4\"></hr>\r\n        <p>En esta sección implementamos las mascaras de convolución para una imagen aplicando otros 3 tipos de kernels\r\n          la imagen #1 (esquina superior izquierda) es la imagen original, la imagen #2 (esquina superior derecha) es la imagen con el kernel de detección de bordes,\r\n          la imagen #3 (esquina inferior izquierda) es la imagen con un kernel BoxBlur, y la imagen #4 (esquina inferior derecha) es la imagen con el kernel Sharpen.\r\n        </p>\r\n        <Sketch setup={setup} draw={draw} preload={preload}/>\r\n      </div>\r\n    )\r\n  } else\r\n    return null\r\n}\r\n","const blur = 1.0 / 9.0;\r\nconst blur_gaussian = 1.0/16.0;\r\n\r\nexport const BoxBlurKernel = [[ blur, blur, blur ], [ blur, blur, blur ], [ blur, blur, blur ]];   \r\nexport const GaussianBlurKernel = [[1*blur_gaussian,2*blur_gaussian,1*blur_gaussian],[2*blur_gaussian,4*blur_gaussian,2*blur_gaussian],[1*blur_gaussian,2*blur_gaussian,1*blur_gaussian]];\r\nexport const SharpenKernel = [[0, -1, 0],[-1, 5, -1],[0,-1,0]];\r\nexport const EdgeDetectionKernel = [[-1, -1 , -1],[-1, 8, -1],[-1, -1, -1]];"],"sourceRoot":""}