{"version":3,"sources":["webpack:///./src/assets/mujer.png","webpack:///./src/pages/histograma.js"],"names":["module","exports","img","segmentedImage","hist","Array","fill","window","Sketch","loadable","className","setup","p5","canvasParentRef","createCanvas","width","height","parent","colorMode","HSB","image","loadPixels","x","y","bright","int","brightness","get","map","console","log","index","pixels","updatePixels","push","stroke","translate","k","which","max","line","pop","preload","loadImage","imagen","href"],"mappings":"iFAAAA,EAAOC,QAAU,IAA0B,qD,oCCC3C,kEAIe,qBAEX,IAAIC,EACAC,EAGAC,EAAO,IAAIC,MAAM,KAAKC,KAAK,GACb,IAAID,MAAM,KAAKC,KAAK,GA4JtC,GAAsB,oBAAXC,OAAwB,CAC/B,IAAMC,EAASC,aAAS,kBAAM,8DAC9B,OACI,mBAAKC,UAAU,kBACX,8EACA,6cAKA,YAACF,EAAD,CAAQG,MA/EpB,SAAeC,EAAIC,GACfD,EAAGE,aAAyB,EAAZZ,EAAIa,MAAyB,EAAbb,EAAIc,OAAc,IAAIC,OAAOJ,GAE7DD,EAAGM,UAAUN,EAAGO,IAAK,KACrBP,EAAGQ,MAAMlB,EAAK,EAAG,GAEjBA,EAAImB,aAGJ,IAAK,IAAIC,EAAI,EAAGA,EAAIpB,EAAIa,MAAOO,IAC3B,IAAK,IAAIC,EAAI,EAAGA,EAAIrB,EAAIc,OAAQO,IAAK,CAEjC,IAAIC,EAASZ,EAAGa,IAAIb,EAAGc,WAAWd,EAAGe,IAAIL,EAAGC,KAK5CnB,EAAKoB,KAIbpB,EAAOA,EAAKwB,KAAI,SAAAN,GAAC,OAAU,IAANA,EAAU,EAAIA,KACnCO,QAAQC,IAAI1B,GAaZD,EAAekB,aACf,IAAK,IAAIC,EAAI,EAAGA,EAAInB,EAAeY,MAAOO,IACtC,IAAK,IAAIC,EAAI,EAAGA,EAAIpB,EAAea,OAAQO,IAAK,CAC5C,IAAIQ,EAAyC,GAAhCT,EAAIC,EAAIpB,EAAeY,OACjCH,EAAGa,IAAIb,EAAGc,WAAWd,EAAGe,IAAIL,EAAGC,MAAQ,KACtCpB,EAAe6B,OAAOD,EAAQ,GAAK,EACnC5B,EAAe6B,OAAOD,EAAQ,GAAK,EACnC5B,EAAe6B,OAAOD,EAAQ,GAAK,GAE/BnB,EAAGa,IAAIb,EAAGc,WAAWd,EAAGe,IAAIL,EAAGC,KAAO,MAC1CpB,EAAe6B,OAAOD,EAAQ,GAAK,IACnC5B,EAAe6B,OAAOD,EAAQ,GAAK,IACnC5B,EAAe6B,OAAOD,EAAQ,GAAK,KAI/C5B,EAAe8B,eACfrB,EAAGQ,MAAMjB,EAAgB,EAAGD,EAAIc,OAAS,IAEzCJ,EAAGsB,OACHtB,EAAGuB,OAAO,OACVvB,EAAGwB,UAAUlC,EAAIa,MAAQ,EAAG,GAC5B,IAAK,IAAIsB,EAAI,EAAGA,EAAInC,EAAIa,MAAOsB,GAAK,EAAG,CACnC,IAAIC,EAAQ1B,EAAGa,IAAIb,EAAGgB,IAAIS,EAAG,EAAGnC,EAAIa,MAAO,EAAG,MAC1CQ,EAAKX,EAAGgB,IAAIxB,EAAKkC,GAAQ,EAAG1B,EAAG2B,IAAInC,GAAOF,EAAIc,OAAQ,GAC1DJ,EAAG4B,KAAKH,EAAGnC,EAAIc,OAAQqB,EAAGd,GAE9BX,EAAG6B,OAiB2BC,QApFlC,SAAiB9B,GACbV,EAAMU,EAAG+B,UAAUC,KACnBzC,EAAiBS,EAAG+B,UAAUC,QAmFtB,qCACA,sBACI,sBAAI,iBAAGC,KAAK,oDAAR,iBACJ,sBAAI,iBAAGA,KAAK,qDAAR,wBACJ,sBAAI,iBAAGA,KAAK,8DAAR,wBACJ,sBAAI,iBAAGA,KAAK,iDAAR,mBACJ,sBAAI,iBAAGA,KAAK,kDAAR,mDACJ,sBAAI,iBAAGA,KAAK,wDAAR,yDACJ,iFACA,+KACA,qHAMZ,OAAO","file":"component---src-pages-histograma-js-b3816215391254f1a73c.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/mujer-b9d874a2aec8953de70bd3dcd0b58d89.png\";","\r\nimport React from \"react\";\r\nimport loadable from \"@loadable/component\"\r\nimport imagen from \"../assets/mujer.png\";\r\n\r\nexport default () => {\r\n\r\n    var img;\r\n    var segmentedImage;\r\n    var minThreshold = 0;\r\n    var minVar = 0;\r\n    var hist = new Array(256).fill(0);\r\n    var probability = new Array(256).fill(0);\r\n    \r\n    function otsu(p5, image) {\r\n        //Calculo de la probabilidad para cada valor de intensidad\r\n        p5.colorMode(p5.HSB, 255);\r\n        image.loadPixels();\r\n        var imageTotalPixels = image.pixels.length / 4;\r\n\r\n        // console.log(\"imageTotalPixels\", imageTotalPixels);\r\n        \r\n        for (let x = 0; x < image.width; x++) {\r\n            for (let y = 0; y < image.height; y++) {\r\n                // var index = (x + y * img.width) * 4;\r\n                var bright = p5.int(p5.brightness(p5.get(x, y)));\r\n                // var h = img.pixels[index + 0];\r\n                // var s = img.pixels[index + 1];\r\n                // var l = img.pixels[index + 2];\r\n                // var a = img.pixels[index + 3];\r\n                hist[bright]++;\r\n            }\r\n        }\r\n\r\n        console.log(\"hist\", hist)\r\n        for (var i = 0; i < 255; i++) {\r\n            probability[i] = hist[i] / imageTotalPixels;\r\n        }\r\n\r\n        console.log(\"probability\", probability);\r\n        //iterar sobre todos los posibles Thresholds y encontrar la varianza minima\r\n        for(var t = 0; t < 255; t++) {\r\n            //pesos clase 1 y 2\r\n            var c1Weight = 0;\r\n            var c2Weight = 0;\r\n            for(var i = 0; i < t; i++) {\r\n                c1Weight += probability[i];\r\n            }\r\n            for(var i = t + 1; i < 255; i++) {\r\n                c2Weight += probability[i];\r\n            }\r\n            // console.log(\"c1Weight\", c1Weight);\r\n            // console.log(\"c2Weight\", c2Weight);\r\n\r\n            //promedios calse 1 y 2\r\n            var c1Mean = 0;\r\n            var c2Mean = 0;\r\n            for(var i = 0; i < t; i++) {\r\n                c1Mean += (i * probability[i]) / c1Weight;\r\n            }\r\n            for(var i = t + 1; i < 255; i++) {\r\n                c2Mean += (i * probability[i]) / c2Weight;\r\n            }\r\n\r\n            //varianzas clase 1 y 2\r\n            var c1Var = 0; \r\n            var c2Var = 0;\r\n            for(var i = 0; i < t; i++) {\r\n                c1Var += (i - c1Mean)**2 * (probability[i] / c1Weight);\r\n            }\r\n            for(var i = t + 1; i < 255; i++) {\r\n                c2Var += (i - c2Mean)**2 * (probability[i] / c2Weight);\r\n            }\r\n\r\n            // console.log(\"t\", t);\r\n            // console.log(\"c1Weight\", c1Weight);\r\n            // console.log(\"c1Var\", c1Var);\r\n            // console.log(\"c2Weight\", c2Weight);\r\n            // console.log(\"c2Var\", c2Var);\r\n            var weightedVar = (c1Weight * c1Var) + (c2Weight * c2Var);\r\n            // console.log(\"weightedVar\", weightedVar);\r\n            // console.log(\"minVar\", minVar);\r\n            if(weightedVar > minVar) {\r\n                // console.log(\"weightedVar\", weightedVar);\r\n                // console.log(\"t\", t);\r\n                minVar = weightedVar;\r\n                minThreshold = t;\r\n            }\r\n        }\r\n        \r\n        // console.log(\"minThreshold\", minThreshold);\r\n        return minThreshold;\r\n    }\r\n\r\n    function preload(p5) {\r\n        img = p5.loadImage(imagen);\r\n        segmentedImage = p5.loadImage(imagen);\r\n    }\r\n\r\n    function setup(p5, canvasParentRef) {\r\n        p5.createCanvas(img.width * 2, (img.height * 2) + 50).parent(canvasParentRef);\r\n        // p5.img.resize(600, 600);\r\n        p5.colorMode(p5.HSB, 255);\r\n        p5.image(img, 0, 0);\r\n        \r\n        img.loadPixels();\r\n\r\n        //Calcula el histograma\r\n        for (let x = 0; x < img.width; x++) {\r\n            for (let y = 0; y < img.height; y++) {\r\n                // var index = (x + y * img.width) * 4;\r\n                var bright = p5.int(p5.brightness(p5.get(x, y)));\r\n                // var h = img.pixels[index + 0];\r\n                // var s = img.pixels[index + 1];\r\n                // var l = img.pixels[index + 2];\r\n                // var a = img.pixels[index + 3];\r\n                hist[bright]++;\r\n            }\r\n        }\r\n        \r\n        hist = hist.map(x => x === 0 ? 1 : x);\r\n        console.log(hist);\r\n\r\n        //promedio histograma\r\n        // var total = 0;\r\n        // for(var i = 0; i < hist.length; i++) {\r\n        //     total += hist[i];\r\n        // }\r\n        // var avg = total / hist.length;\r\n\r\n        // var threshold = p5.max(hist) - avg;\r\n        // console.log(threshold);\r\n\r\n        //Segmenta la imagen\r\n        segmentedImage.loadPixels();\r\n        for (let x = 0; x < segmentedImage.width; x++) {\r\n            for (let y = 0; y < segmentedImage.height; y++) {\r\n                var index = (x + y * segmentedImage.width) * 4;\r\n                if(p5.int(p5.brightness(p5.get(x, y))) <= 100) {\r\n                    segmentedImage.pixels[index + 0] = 0;\r\n                    segmentedImage.pixels[index + 1] = 0;\r\n                    segmentedImage.pixels[index + 2] = 0;\r\n                }\r\n                else if(p5.int(p5.brightness(p5.get(x, y))) > 100) {\r\n                    segmentedImage.pixels[index + 0] = 255; \r\n                    segmentedImage.pixels[index + 1] = 255;\r\n                    segmentedImage.pixels[index + 2] = 255;                                                                                   \r\n                }\r\n            }\r\n        }\r\n        segmentedImage.updatePixels();\r\n        p5.image(segmentedImage, 0, img.height + 50);\r\n\r\n        p5.push();\r\n        p5.stroke('red');\r\n        p5.translate(img.width + 5, 0);\r\n        for (var k = 0; k < img.width; k += 2) {\r\n            var which = p5.int(p5.map(k, 0, img.width, 0, 255));\r\n            var y = (p5.map(hist[which], 0, p5.max(hist), img.height, 0));\r\n            p5.line(k, img.height, k, y);\r\n        }\r\n        p5.pop();\r\n\r\n        // p5.textSize(40); \r\n        // p5.fill(p5.color('white')); \r\n        // p5.text(\"Segmentaci贸n\", 0, img.height + 50); \r\n    }\r\n\r\n    if (typeof window !== \"undefined\") {\r\n        const Sketch = loadable(() => import(\"react-p5\"))\r\n        return (\r\n            <div className=\"ml-5 mr-5 my-3\">\r\n                <h1>Histograma y segmentaci贸n imagen en escala de grises</h1>\r\n                <p>Para el proceso de segmentaci贸n se uso Thresholding usando el metodo de Otsu para el calculo automatico del valor umbral\r\n                    y el modelo de color HSV sobre la imagen para extraer el valor de intensidad del pixel, que es un valor entero \r\n                    entre 0 y (L - 1) siendo L el numero maximo que un pixel puede representar. Para este caso particular como la imagen \r\n                    esta a escala de grises, L toma un valor de 256; siendo 0 negro puro y 255 blanco puro.\r\n                </p>\r\n                <Sketch setup={setup} preload={preload} />\r\n                <h2>Referencias</h2>\r\n                <ul>\r\n                    <li><a href=\"https://en.wikipedia.org/wiki/Image_segmentation\">Segmentaci贸n</a></li>\r\n                    <li><a href=\"https://es.wikipedia.org/wiki/Modelo_de_color_HSV\">Modelo de color HSV</a></li>\r\n                    <li><a href=\"https://es.wikipedia.org/wiki/M%C3%A9todo_del_valor_umbral\">Metodo valor umbral</a></li>\r\n                    <li><a href=\"https://en.wikipedia.org/wiki/Otsu%27s_method\">Metodo de Otsu</a></li>\r\n                    <li><a href=\"https://processing.org/examples/histogram.html\">https://processing.org/examples/histogram.html</a></li>\r\n                    <li><a href=\"https://editor.p5js.org/ebenjmuse/sketches/HyPfeGkCZ\">https://editor.p5js.org/ebenjmuse/sketches/HyPfeGkCZ</a></li>\r\n                    <li>Handbook of Image and Video Processing (Second Edition)</li>\r\n                    <li>Metz, M. (2018). Optimum Global Thresholding Using Otsu麓s Method. https://github.com/Michael-Metz/image-processing/blob/master/otsus-method-paper.pdf</li>\r\n                    <li>Digital Image Processing (CS/ECE 545) Lecture 2: Histograms and Point Operations (Part 1)</li>\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n    else {\r\n        return null\r\n    }\r\n};\r\n"],"sourceRoot":""}