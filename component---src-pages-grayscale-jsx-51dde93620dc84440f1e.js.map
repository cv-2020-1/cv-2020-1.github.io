{"version":3,"sources":["webpack:///./src/assets/fuego.jpg","webpack:///./src/algorithms/grayscale/editPixelsGray.jsx","webpack:///./src/algorithms/grayscale/grayScale.jsx","webpack:///./src/pages/grayscale.jsx","webpack:///./src/assets/Code.png","webpack:///./src/assets/LUMA.png"],"names":["module","exports","ligthnessGrayScale","r","g","b","Math","max","min","averageGrayScale","luminosityGrayScale","parseInt","editPixelsGray","p5","img","tipo","loadPixels","technique","x","width","y","height","loc","average_rgb","pixels","color","red","green","blue","updatePixels","grayScale","props","window","Sketch","loadable","setup","canvasParentRef","createCanvas","parent","image","draw","preload","loadImage","asset","divStyle","backgroundColor","padding","className","background","src","style","imagen","codigo"],"mappings":"iFAAAA,EAAOC,QAAU,IAA0B,qD,oCCiC3C,SAASC,EAAmBC,EAAGC,EAAGC,GACjC,OAAOC,KAAKC,IAAIJ,EAAGC,EAAGC,GAAKC,KAAKE,IAAIL,EAAGC,EAAGC,GAAK,EAEhD,SAASI,EAAiBN,EAAGC,EAAGC,GAC/B,OAAQF,EAAIC,EAAIC,GAAK,EAItB,SAASK,EAAoBP,EAAGC,EAAGC,GAClC,OAAOM,SAAS,IAAOR,EAAI,IAAOC,EAAI,IAAOC,GAX/BO,IA/BQ,SAACC,EAAIC,EAAKC,GAChCD,EAAIE,aACJ,IAAIC,EAAY,UAEJ,WAARF,EACHE,EAAYR,EACM,aAARM,EACVE,EAAYf,EACM,cAARa,IACVE,EAAYP,GAGb,IAAK,IAAIQ,EAAI,EAAGA,EAAIJ,EAAIK,MAAQ,IAAKD,EACpC,IAAK,IAAIE,EAAI,EAAGA,EAAIN,EAAIO,OAAS,IAAKD,EAAG,CACxC,IAAIE,EAA4B,GAArBJ,EAAIJ,EAAIK,MAAQC,GACvBG,EAAcN,EACjBH,EAAIU,OAAOF,GACXR,EAAIU,OAAOF,EAAM,GACjBR,EAAIU,OAAOF,EAAM,IAEdG,EAAQZ,EAAGY,MAAMF,EAAaA,EAAaA,GAC/CT,EAAIU,OAAOF,GAAOT,EAAGa,IAAID,GACzBX,EAAIU,OAAOF,EAAM,GAAKT,EAAGc,MAAMF,GAC/BX,EAAIU,OAAOF,EAAM,GAAKT,EAAGe,KAAKH,GAKhC,OADAX,EAAIe,eACGf,I,sICnBO,SAASgB,EAAUC,GACjC,IAAIjB,EAAM,KAqBV,GAAsB,oBAAXkB,OAAwB,CAClC,IAAMC,EAASC,aAAS,kBAAM,8DAC9B,OAAO,YAACD,EAAD,CAAQE,MAjBF,SAACtB,EAAIuB,GACTvB,EAAGwB,aAAa,IAAK,KACvBC,OAAOF,GACdvB,EAAG0B,MACF3B,YAAeC,EAAIC,EAAKiB,EAAMd,WAC9B,EACA,EACAJ,EAAGM,MACHN,EAAGQ,SASyBmB,KALjB,SAAC3B,KAK4B4B,QApB1B,SAAC5B,GAChBC,EAAMD,EAAG6B,UAAUC,QAsBnB,OAAO,K,8CC9BM,qBACd,IAAMC,EAAW,CAChBC,gBAAiB,QACjBC,QAAS,QAEV,OACC,mBAAKC,UAAU,kBACd,uBACC,0CACA,0JAIA,mFACA,ofASA,mBAAKC,WAAW,SACf,mBACCC,IAAI,mKACJ5B,OAAO,QACP6B,MAAON,KAGT,YAAC,EAAD,CAAW3B,UAAW,cACtB,8CACA,4UAOA,mBAAK+B,WAAW,SACf,mBACCC,IAAI,8GACJ5B,OAAO,QACP6B,MAAON,KAGT,YAAC,EAAD,CAAW3B,UAAW,YACtB,gHAIA,wfASA,mBAAK+B,WAAW,SACf,mBACCC,IAAI,sMACJ5B,OAAO,QACP6B,MAAON,KAGT,YAAC,EAAD,CAAW3B,UAAW,eACtB,iEA7DD,4OAkEC,uBACA,mBAAKgC,IAAKE,IAAQ9B,OAAO,UACzB,oEApED,qKAwEC,uBACA,mBAAK4B,IAAKG,IAAQ/B,OAAO,UACzB,sCACA,sBACC,yMAKA,2LAKA,qMAMD,qCACA,sBACC,2FAGA,iEACA,2FAGA,6GAGA,sG,qBCrHLrB,EAAOC,QAAU,IAA0B,oD,4CCA3CD,EAAOC,QAAU,IAA0B,oD","file":"component---src-pages-grayscale-jsx-51dde93620dc84440f1e.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/fuego-15df1985b6d383a48079c4d3db3154d0.jpg\";","const editPixelsGray = (p5, img, tipo) => {\r\n\timg.loadPixels();\r\n\tvar technique = \"average\";\r\n\r\n\tif (tipo == \"average\") {\r\n\t\ttechnique = averageGrayScale;\r\n\t} else if (tipo == \"ligthness\") {\r\n\t\ttechnique = ligthnessGrayScale;\r\n\t} else if (tipo == \"luminosity\") {\r\n\t\ttechnique = luminosityGrayScale;\r\n\t}\r\n\r\n\tfor (var x = 1; x < img.width - 1; ++x) {\r\n\t\tfor (var y = 1; y < img.height - 1; ++y) {\r\n\t\t\tlet loc = (x + img.width * y) * 4;\r\n\t\t\tlet average_rgb = technique(\r\n\t\t\t\timg.pixels[loc],\r\n\t\t\t\timg.pixels[loc + 1],\r\n\t\t\t\timg.pixels[loc + 2]\r\n\t\t\t);\r\n\t\t\tlet color = p5.color(average_rgb, average_rgb, average_rgb);\r\n\t\t\timg.pixels[loc] = p5.red(color);\r\n\t\t\timg.pixels[loc + 1] = p5.green(color);\r\n\t\t\timg.pixels[loc + 2] = p5.blue(color);\r\n\t\t}\r\n\t}\r\n\r\n\timg.updatePixels();\r\n\treturn img;\r\n};\r\n\r\nexport default editPixelsGray;\r\n\r\nfunction ligthnessGrayScale(r, g, b) {\r\n\treturn Math.max(r, g, b) + Math.min(r, g, b) / 2;\r\n}\r\nfunction averageGrayScale(r, g, b) {\r\n\treturn (r + g + b) / 3;\r\n}\r\n\r\n// Gray Scale with LuminosityGrayScale\r\nfunction luminosityGrayScale(r, g, b) {\r\n\treturn parseInt(0.21 * r + 0.72 * g + 0.07 * b);\r\n}\r\n","import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../styles/app.css\";\r\nimport React from \"react\";\r\nimport loadable from \"@loadable/component\";\r\n// Asset to convert\r\nimport asset from \"../../assets/fuego.jpg\";\r\n\r\nimport editPixelsGray from \"./editPixelsGray\";\r\n\r\nexport default function grayScale(props) {\r\n\tlet img = null;\r\n\tlet canvas = null;\r\n\r\n\tconst preload = (p5) => {\r\n\t\timg = p5.loadImage(asset); // Cargar la imagen\r\n\t};\r\n\tconst setup = (p5, canvasParentRef) => {\r\n\t\tcanvas = p5.createCanvas(800, 500);\r\n\t\tcanvas.parent(canvasParentRef);\r\n\t\tp5.image(\r\n\t\t\teditPixelsGray(p5, img, props.technique),\r\n\t\t\t0,\r\n\t\t\t0,\r\n\t\t\tp5.width,\r\n\t\t\tp5.height\r\n\t\t);\r\n\t};\r\n\r\n\tconst draw = (p5) => {\r\n\t\t// p5.background(0);\r\n\t};\r\n\tif (typeof window !== \"undefined\") {\r\n\t\tconst Sketch = loadable(() => import(\"react-p5\"));\r\n\t\treturn <Sketch setup={setup} draw={draw} preload={preload} />;\r\n\t} else {\r\n\t\t//if window does not exist\r\n\t\treturn null;\r\n\t}\r\n}\r\n","import React from \"react\";\r\nimport Grayscale from \"../algorithms/grayscale/grayScale\";\r\n\r\nimport imagen from \"../assets/LUMA.png\";\r\nimport codigo from \"../assets/Code.png\";\r\n\r\nexport default () => {\r\n\tconst divStyle = {\r\n\t\tbackgroundColor: \"white\",\r\n\t\tpadding: \"20px\",\r\n\t};\r\n\treturn (\r\n\t\t<div className=\"ml-5 mr-5 my-3\">\r\n\t\t\t<div>\r\n\t\t\t\t<h1>Escala de Grises</h1>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tA continuación se describen diferentes tecnicas que se pueden aplicar\r\n\t\t\t\t\tpara conseguir transformar una imagen en escalda de grises.\r\n\t\t\t\t</p>\r\n\t\t\t\t<h2>Modificando los pixeles con el método de la desaturación </h2>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tLa desaturación de una imagen funciona convirtiendo un triplete RGB en\r\n\t\t\t\t\tun triplete HSL y luego obligando a la saturación a cero. Básicamente,\r\n\t\t\t\t\testo toma un color y lo convierte en su variante menos saturada . Las\r\n\t\t\t\t\tmatemáticas de esta conversión son más complejas de lo que garantiza\r\n\t\t\t\t\teste artículo, por lo que simplemente proporcionaré el cálculo del\r\n\t\t\t\t\tmétodo abreviado. Un píxel se puede desaturar encontrando el punto\r\n\t\t\t\t\tmedio entre el máximo de (R, G, B) y el mínimo de (R, G, B),\r\n\t\t\t\t</p>\r\n\t\t\t\t<div background=\"white\">\r\n\t\t\t\t\t<img\r\n\t\t\t\t\t\tsrc=\"http://latex.codecogs.com/svg.latex?pixel_%7Bcanal%7D=%5Cfrac%7B%20%5Cmax%7B%20(%20r,%20g,%20b)%20%7D%20&plus;%20%20%5Cmin%7B%20(r,%20g,%20b)%20%7D%20%7D%7B2%7D\"\r\n\t\t\t\t\t\theight=\"100px\"\r\n\t\t\t\t\t\tstyle={divStyle}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<Grayscale technique={\"ligthness\"} />\r\n\t\t\t\t<h2>Técnica del Promedio</h2>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tEste proceso se basa en la estimación del la tonalidad de gris\r\n\t\t\t\t\taplicando un promedio en los 3 canales que tiene cada uno de los\r\n\t\t\t\t\tpixeles presentes en la imagen.A continuación se muestra la formula\r\n\t\t\t\t\tque se utiliza para obtener el valor de gris con el cual quedara cada\r\n\t\t\t\t\tuno de los canales (RGB) en cada pixeles.\r\n\t\t\t\t</p>\r\n\t\t\t\t<div background=\"white\">\r\n\t\t\t\t\t<img\r\n\t\t\t\t\t\tsrc=\"http://latex.codecogs.com/svg.latex?pixel_%7Bcanal%7D%20=%20%5Cfrac%7Br%20&plus;%20g%20&plus;%20b%7D%7B3%7D\"\r\n\t\t\t\t\t\theight=\"100px\"\r\n\t\t\t\t\t\tstyle={divStyle}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<Grayscale technique={\"average\"} />\r\n\t\t\t\t<h2>\r\n\t\t\t\t\tConversión colorimétrica (preservación de la luminancia perceptiva) a\r\n\t\t\t\t\tescala de grises\r\n\t\t\t\t</h2>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tOtra estrategía que se puede utilizar para que el ojo humano perciba\r\n\t\t\t\t\tuna imagen en escala de grises es modificar la intesidad de luz que el\r\n\t\t\t\t\tojo percibe en función del color que se esta observando. De esta\r\n\t\t\t\t\tmanera podemos usar la siguiente acuación de la luminancia nos muestra\r\n\t\t\t\t\tla expresión matemática de ese fenómeno y los factores de ponderación\r\n\t\t\t\t\tde cada componente de color nos indican la sensibilidad del ojo humano\r\n\t\t\t\t\ta las frecuencias del espectro cercanas al rojo, verde y azul.\r\n\t\t\t\t</p>\r\n\t\t\t\t<div background=\"white\">\r\n\t\t\t\t\t<img\r\n\t\t\t\t\t\tsrc=\"http://latex.codecogs.com/svg.latex?pixel_%7Bcanal%7D%20=%20%5Cleft%20%5Clfloor%20%7B0.21*R_%7Bcanal%7D%20&plus;%200.72%20*G_%7Bcanal%7D%20&plus;%200.07%20*B_%7Bcanal%7D%7D%20%5Cright%20%5Crfloor\"\r\n\t\t\t\t\t\theight=\"100px\"\r\n\t\t\t\t\t\tstyle={divStyle}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<Grayscale technique={\"luminosity\"} />\r\n\t\t\t\t<h2>Escala de Grises por Hardware (Shaders)</h2>\r\n\t\t\t\tUna forma mucho mas eficiente de dibujar en nuestra pantalla una imagen\r\n\t\t\t\tes mediante shaders, ya que la misma aprovecha los diferentes nucleos de\r\n\t\t\t\tnuestra GPU para procesar paralelamente cada uno de los pixeles que\r\n\t\t\t\tdeseamos renderizar.\r\n\t\t\t\t<br />\r\n\t\t\t\t<img src={imagen} height=\"800px\" />\r\n\t\t\t\t<h3>Código que ejecutara cada nucleo de la GPU</h3>\r\n\t\t\t\tComo cada uno de los procesadores de la GPU debe ejecutar codigo de\r\n\t\t\t\tmanera independiente se debe crear un archivo de tipo \".glsl\" para\r\n\t\t\t\tenviar a cada uno de ellos.\r\n\t\t\t\t<br />\r\n\t\t\t\t<img src={codigo} height=\"300px\" />\r\n\t\t\t\t<h2>Conclusiones</h2>\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t<li>\r\n\t\t\t\t\t\tExisten diferentes mecanismos para transformar una imagen a escala\r\n\t\t\t\t\t\tde grises, los cuales tambien utilizan diferentes enfoques y\r\n\t\t\t\t\t\tproducen resultados con diferentes variaciones.\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li>\r\n\t\t\t\t\t\tTranformar una imagen en escala de grises es altamente pararelizable\r\n\t\t\t\t\t\tya que la operación se puede realizar de manera independiente sobre\r\n\t\t\t\t\t\tcada uno de los pixeles.\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li>\r\n\t\t\t\t\t\tLos Shaders utilizan cada uno de los nucleos de la GPU de manera\r\n\t\t\t\t\t\tindependiente para modificar cada uno de los pixeles paralelamente y\r\n\t\t\t\t\t\trealizar el proceso mas rapidamente.\r\n\t\t\t\t\t</li>\r\n\t\t\t\t</ul>\r\n\t\t\t\t<h3>Referencias</h3>\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t<li>\r\n\t\t\t\t\t\thttps://www.uv.es/gpoei/eng/Pfc_web/generalidades/grises/grey.htm\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li>https://en.wikipedia.org/wiki/Grayscale</li>\r\n\t\t\t\t\t<li>\r\n\t\t\t\t\t\thttps://www.dspace.espol.edu.ec/bitstream/123456789/10715/1/I.pdf\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li>\r\n\t\t\t\t\t\thttp://roberto-mtz.blogspot.com/2013/02/lab-1-escala-de-grises-promedio-umbral.html\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li>\r\n\t\t\t\t\t\thttps://tannerhelland.com/2011/10/01/grayscale-image-algorithm-vb6.html\r\n\t\t\t\t\t</li>\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n","module.exports = __webpack_public_path__ + \"static/Code-73cd0c341f13415bf37711b89972b8b6.png\";","module.exports = __webpack_public_path__ + \"static/LUMA-a38aac36d6c802c45835c62a8dce7954.png\";"],"sourceRoot":""}